// CREATING A STACK
// StackCreation.cpp
#include <cassert>
#include <cstdlib>
#include <iostream>

using namespace std;

const int STACK_SIZE = 100; //Maximum size of stack

// The stack itself

struct stack {
    int count;  // number of items in the stack
    int data[STACK_SIZE];   // the items themselves
};

inline void stack_init(struct stack& the_stack)
{
    the_stack.count = 0;    // Zero the stack
}

inline void stack_push(struct stack& the_stack, const int item)
{
    assert((the_stack.count >= 0) &&
           (the_stack.count < sizeof(the_stack.data)/sizeof(the_stack.data[0])));

    the_stack.data[the_stack.count] = item; // assign stack item
    ++the_stack.count;              // increment the stack
}

inline int stack_pop(struct stack& the_stack)
{
    //stack goes down by one
    --the_stack.count;

    assert((the_stack.count >= 0) &&
           (the_stack.count < sizeof(the_stack.data)/sizeof(the_stack.data[0])));

    // Then we return the top value
    return (the_stack.data[the_stack.count]);

    // Imagine the stack as a literal stack of papers we push to the top
    // It adds a paper
    // We pop from the stack we remove the top paper
}

// Test the stack

int main()
{
    struct stack a_stack;   // Stack we want to use - create.

    stack_init(a_stack);

    // Push three value on the stack.

    stack_push(a_stack, 1);
    stack_push(a_stack, 2);
    stack_push(a_stack, 3);

    // Pop the items from the stack
    cout << stack_pop(a_stack) << '\n';
    cout << stack_pop(a_stack) << '\n';
    cout << stack_pop(a_stack) << '\n';
}
