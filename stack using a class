// Example 13-2
// classStack.cpp
#include <iostream>
#include <cstdlib>
#include <cassert>

using namespace std;

const int STACK_SIZE = 100; // Maximum size of the stack


// The stack itself
class stack {
private:
    int count;  // Number of items in the stack
    int data[STACK_SIZE];   // The items themselves};

public:
    // initialize the stack
    void init();

    // Push an item on the stack
    void push(const int item);

    // Pop an item from the stack
    int pop();
};


inline void stack::init()
{
    count = 0;  // Zero the stack
}

inline void stack::push(const int item)
{
    assert((count >= 0) &&
           (count < sizeof(data)/sizeof(data[0])));

    data[count] = item;
    ++count;
}

inline int stack::pop()
{
    // Stack goes down by one
    --count;

    assert((count >= 0) &&
           (count < sizeof(data)/sizeof(data[0])));

    // Then we return the top value
    return (data[count]);
}

// A short routine to test the stack

int main()
{
    stack a_stack;  // Stack we want to use

    a_stack.init();

    // Push three value on the stack
    a_stack.push(1);
    a_stack.push(2);
    a_stack.push(3);

    // Pop the item from the stack
    cout << "Expect a 3: " << a_stack.pop() << endl;
    cout << "Expect a 2: " << a_stack.pop() << endl;
    cout << "Expect a 1: " << a_stack.pop() << endl;

    return 0;
}
